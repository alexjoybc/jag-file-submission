apiVersion: v1
kind: Template
labels:
  template: efiling-pipeline-template
metadata:
  annotations:
    openshift.io/display-name: Efiling Pipeline Template
    description: |-
      This is a template for OpenShift Jenkins Pipelines.
    iconClass: icon-jenkins
    tags: instant-app,jenkins
  name: pipeline-build-template
parameters:
  - description: The name assigned to all of the frontend objects defined in this template.
    displayName: Name
    name: appName
    required: true
    value: efiling-frontend
  - description: The OpenShift Namespace prefix where the ImageStreams reside.
    displayName: Namespace Prefix (Prefix for each namespace ie prefix-tools, prefix-dev etc)
    name: namespacePrefix
    required: true
    value:
  - description: The remote URL of the repository with your application source code, support https and ssh
    displayName: Git Remote URL
    name: gitUrl
    required: true
    value:
  - description:
      Set this to a branch name, tag or other ref of your repository if you
      are not using the default branch.
    displayName: Git Reference
    name: gitRef
    value: master
    required: true
  - description: Set this to the relative path to your project, if emtpy defaulted to root of the repository
    displayName: Context Directory
    name: gitContextDir
    value:
objects:
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${appName}
      name: ${appName}
      namespace: "${namespacePrefix}-tools"
  - kind: BuildConfig
    apiVersion: "v1"
    metadata:
      labels:
        application: ${appName}
      name: "${appName}-pipeline"
      namespace: "${namespacePrefix}-tools"
    spec:
      source:
        type: Git
        git:
          uri: ${gitUrl}
          ref: ${gitRef}
        contextDir: ${gitContextDir}
      triggers:
        - type: "GitHub"
          github:
            secret: ${GITHUB_WEBHOOK_SECRET}
        - type: "ConfigChange"
      strategy:
        jenkinsPipelineStrategy:
          env:
            - name: APP_NAME
              value: ${appName}
            - name: JENKINS_POD
              value: nodejs
            - name: GIT_SOURCE_URL
              value: https://github.com/bcgov/jag-file-submission.git
            - name: GIT_SOURCE_REF
              value: master
            - name: REACT_FRONTEND_BC_PATH
              value: /openshift/applications/builds/react-web-app-builder-bc.yaml
            - name: NGINX_FRONTEND_BC_PATH
              value: /openshift/applications/builds/static-web-app-running-on-nginx-bc.yaml
            - name: TOOLS_NAMESPACE
              value: ${namespacePrefix}-tools
            - name: TEST_NAMESPACE
              value: ${namespacePrefix}-test
            - name: LIFECYCLE_WEBHOOK
            - name: NAMESPACE_PREFIX
              value: qzaydf
          jenkinsfile: |-
            try {
                node("${JENKINS_POD}"){

                    stage("Checkout Templates"){
                        dir("${APP_NAME}"){
                            git url: "${GIT_SOURCE_URL}", branch: "${GIT_SOURCE_REF}"
                        }
                    }
                    
                    stage("Place React Builder Build Config in Test"){
                        dir("${APP_NAME}"){
                            sh "echo REACT BUILDER PATH: ${REACT_FRONTEND_BC_PATH}"
                            sh "oc process -f ${REACT_FRONTEND_BC_PATH} \
                                -p namespacePrefix=${NAMESPACE_PREFIX} \
                                | oc create -f - -n ${TOOLS_NAMESPACE}"
                        }
                    }

                    stage("Place Static Web App on NGINX Build Config in Tools"){
                        dir("${APP_NAME}"){
                            sh "echo STATIC APP ON NGINX PATH: ${NGINX_FRONTEND_BC_PATH}"
                            sh "oc process -f ${NGINX_FRONTEND_BC_PATH} \
                                -p namespacePrefix=${NAMESPACE_PREFIX} \
                                | oc create -f - -n ${TOOLS_NAMESPACE}"
                        }
                    }
                }
            } catch (err) {
                echo "in catch block"
                currentBuild.result = 'FAILURE'
                env.ERR = "${err}"
                node {
                    sh "curl -XPOST '${LIFECYCLE_WEBHOOK}' -H 'Content-type: application/json' --data '{\"username\":\"The Pipe Lion\",\"icon_emoji\":\":lion_face:\",\"text\": \"${APP_NAME} Pipeline Failure - ${ERR}\"}'"
                }
                echo "Caught: ${err}"
                throw err
            }
        type: JenkinsPipeline
