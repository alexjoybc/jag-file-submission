apiVersion: build.openshift.io/v1
kind: BuildConfig
metadata:
  creationTimestamp: "2020-07-21T15:37:30Z"
  labels:
    application: react-web-app-demo-pipeline
    template: master-build-pipeline
  name: react-web-app-demo-pipeline
  namespace: qzaydf-tools
spec:
  failedBuildsHistoryLimit: 5
  nodeSelector: {}
  output: {}
  postCommit: {}
  resources: {}
  runPolicy: Serial
  source:
    git:
      ref: master
      uri: "https://github.com/bcgov/jag-file-submission"
    type: Git
  strategy:
    jenkinsPipelineStrategy:
      env:
        - name: APP_NAME
          value: react-web-app-demo
        - name: NGINX_NAME
        - name: JENKINS_POD
          value: nodejs
        - name: TOOLS_NAMESPACE
          value: qzaydf-tools
        - name: DEV_NAMESPACE
          value: qzaydf-dev
        - name: TEST_NAMESPACE
          value: qzaydf-test
        - name: LIFECYCLE_WEBHOOK
      jenkinsfile: |-
        try {
            
            node("${JENKINS_POD}") {

                stage("React Web App BUILDER") {
                    openshift.withCluster() {
                        openshift.withProject() {
                            sh 'echo Create React artifacts.'
                            sh 'oc start-build ${APP_NAME}-builder -n ${TOOLS_NAMESPACE} --wait'
                        }
                    }
                }
                
                stage("Static Web App BUILDER") {
                    openshift.withCluster() {
                        openshift.withProject() {
                            sh 'echo Place React artifacts on NGINX service.'
                            sh 'oc start-build ${NGINX_NAME} -n ${TOOLS_NAMESPACE} --wait'
                        }
                    }
                }
                
                stage('Tag Image with Dev') {
                    openshift.withCluster() {
                        openshift.withProject() {
                            sh 'echo Tagging image with DEV'
                            sh 'oc tag ${NGINX_NAME}:latest ${NGINX_NAME}:dev'
                        }
                    }
                }
                
                stage("Deploy to DEV") {
                    openshift.withCluster() {
                        openshift.withProject() {
                            sh 'echo Wait for Demo app to rollout completely.'
                            sh 'oc rollout status -n ${DEV_NAMESPACE} dc/${APP_NAME} --watch'
                        }
                    }
                }
                
                stage("Promotion gate TEST") {
                    script {
                        input message: 'Promote application to Test?'
                    }
                    sh 'echo Tagging Image with Test'
                    sh 'oc tag ${NGINX_NAME}:latest ${NGINX_NAME}:test'
                }
                
                stage("Deploy to TEST") {
                    openshift.withCluster() {
                        openshift.withProject() {
                            sh 'echo Wait for Demo app to rollout completely.'
                            sh 'oc rollout status -n ${TEST_NAMESPACE} dc/${APP_NAME} --watch'
                        }
                    }
                }
            }

        } catch (err) {
           echo "in catch block"

           currentBuild.result = 'FAILURE'
           env.ERR = "${err}"
           node {
              sh "curl -XPOST '${LIFECYCLE_WEBHOOK}' -H 'Content-type: application/json' --data '{\"username\":\"The Pipe Lion\",\"icon_emoji\":\":lion_face:\",\"text\": \"${APP_NAME} Pipeline Failure - ${ERR}\"}'"
           }
           echo "Caught: ${err}"
           throw err
        }
    type: JenkinsPipeline
  successfulBuildsHistoryLimit: 5
  triggers:
    - type: ConfigChange
    - github:
        secret: "${GITHUB_WEBHOOK_SECRET}"
      type: GitHub
status:
  lastVersion: 0
